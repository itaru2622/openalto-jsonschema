# generated by datamodel-codegen:
#   filename:  draft-ietf-alto-performance-metrics.json

from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum
from typing import Any, Dict, List, Optional, Union

Model = Any


@dataclass
class ResponseMeta:
    pass


@dataclass
class ResponseEntityBase:
    meta: Optional[ResponseMeta] = None


MediaType = str


URI = str


PIDName = str


ResourceID = PIDName


@dataclass
class VersionTag:
    resource_id: ResourceID
    tag: str


TypedEndpointAddr = Any


class AddressType(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


IPv4EndpointPrefix = str


IPv6EndpointPrefix = str


@dataclass
class EndpointAddrGroup:
    ipv4: Optional[List[IPv4EndpointPrefix]] = None
    ipv6: Optional[List[IPv6EndpointPrefix]] = None


class CostMode(Enum):
    numerical = 'numerical'
    ordinal = 'ordinal'


class CostMetricEnum(Enum):
    routingcost = 'routingcost'
    delay_ow = 'delay-ow'
    delay_rt = 'delay-rt'
    delay_variation = 'delay-variation'
    hopcount = 'hopcount'
    lossrate = 'lossrate'
    tput = 'tput'
    bw_residual = 'bw-residual'
    bw_maxres = 'bw-maxres'


CostMetric = Union[str, CostMetricEnum]


ResourceSpecificEndpointProperty = Any


GlobalEndpointProperty = str


EndpointPropertyType = Union[ResourceSpecificEndpointProperty, GlobalEndpointProperty]


@dataclass
class Capabilities:
    pass


@dataclass
class IRDResourceEntry:
    uri: URI
    media_type: MediaType
    accepts: Optional[MediaType] = None
    capabilities: Optional[Capabilities] = None
    uses: Optional[List[ResourceID]] = None


IRDResourceEntries = Dict[str, IRDResourceEntry]


@dataclass
class ServiceResponseMeta(ResponseMeta):
    vtag: Optional[VersionTag] = None
    dependent_vtags: Optional[List[VersionTag]] = None


NetworkMapData = Dict[str, EndpointAddrGroup]


@dataclass
class CostMapCapabilities:
    cost_type_names: List[str]


DstCosts = Dict[str, Optional[Union[str, float, List, bool, Dict[str, Any]]]]


@dataclass
class ReqFilteredNetworkMap:
    pids: List[PIDName]
    address_types: Optional[List[AddressType]] = None


@dataclass
class PIDFilter:
    srcs: List[PIDName]
    dsts: List[PIDName]


@dataclass
class FilteredCostMapCapabilities:
    cost_type_names: Optional[List[str]] = None
    cost_constraints: Optional[bool] = False


@dataclass
class ReqEndpointProp:
    properties: List[EndpointPropertyType]
    endpoints: List[TypedEndpointAddr]


@dataclass
class EndpointPropertyCapabilities:
    prop_types: List[EndpointPropertyType]


EndpointProps = Dict[str, Optional[Union[str, float, List, bool, Dict[str, Any]]]]


@dataclass
class EndpointFilter:
    srcs: Optional[List[TypedEndpointAddr]] = None
    dsts: Optional[List[TypedEndpointAddr]] = None


EndpointDstCosts = Dict[str, Optional[Union[str, float, List, bool, Dict[str, Any]]]]


class CostSource(Enum):
    nominal = 'nominal'
    sla = 'sla'
    import_ = 'import'
    estimation = 'estimation'


@dataclass
class CostContext:
    cost_source: Optional[CostSource] = None
    parameters: Optional[Union[str, float, List, bool, Dict[str, Any]]] = None


@dataclass
class CostType:
    cost_mode: CostMode
    cost_metric: CostMetric


IRDMetaCostTypes = Dict[str, CostType]


@dataclass
class Meta(ResponseMeta):
    cost_types: Optional[IRDMetaCostTypes] = None
    default_alto_network_map: Optional[ResourceID] = None


@dataclass
class InfoResourceDirectory(ResponseEntityBase):
    resources: IRDResourceEntries
    meta: Optional[Meta] = None


@dataclass
class InfoResourceNetworkMap(ResponseEntityBase):
    network_map: NetworkMapData
    meta: Optional[ServiceResponseMeta] = None


@dataclass
class Meta1(ServiceResponseMeta):
    dependent_vtags: Any
    cost_type: CostType


CostMapData = Dict[str, DstCosts]


@dataclass
class ReqFilteredCostMap:
    cost_type: CostType
    constraints: Optional[List[str]] = None
    pids: Optional[PIDFilter] = None


EndpointPropertyMapData = Dict[str, EndpointProps]


@dataclass
class ReqEndpointCostMap:
    cost_type: CostType
    endpoints: EndpointFilter
    constraints: Optional[List[str]] = None


@dataclass
class Meta2(ServiceResponseMeta):
    cost_type: CostType


EndpointCostMapData = Dict[str, EndpointDstCosts]


@dataclass
class CostType1(CostType):
    cost_metric: Optional[Union[CostMetric, Any]] = None
    cost_context: Optional[CostContext] = None
    description: Optional[str] = None


@dataclass
class InfoResourceCostMap(ResponseEntityBase):
    meta: Meta1
    cost_map: CostMapData


@dataclass
class InfoResourceEndpointProperties(ResponseEntityBase):
    endpoint_properties: EndpointPropertyMapData
    meta: Optional[ServiceResponseMeta] = None


@dataclass
class InfoResourceEndpointCostMap(ResponseEntityBase):
    meta: Meta2
    endpoint_cost_map: EndpointCostMapData
