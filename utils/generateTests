#!/usr/bin/env python


def generateOutput(tests, gen_test=False):
    import os.path
    for t in tests.get('messages', []):
        template = t.get('template', '')
        if os.path.exists(template):
            schema_prefix, _ = os.path.splitext(template)
            for c in t.get('cases', []):
                features = c.get('features', [])
                output_schema = schema_prefix + '.' + '.'.join(features) + '.json'
                output_schema_path = os.path.join('public', output_schema)
                if gen_test:
                    for e in c.get('examples', []):
                        epath = e.get('path', '')
                        if os.path.exists(epath):
                            test_cmd = 'jsonschema -i %s %s' % (epath, output_schema_path)
                            print('echo %s;' %  test_cmd)
                            print('ERROR=$(%s 2>&1 > /dev/null);' % test_cmd)
                            if e.get('passTest', True):
                                print('if [[ $ERROR == "" ]]; then echo pass; else echo failed; fi;' % expected)
                            else:
                                print('if [[ $ERROR == "" ]]; then echo failed; else echo pass; fi;' % expected)
                else:
                    print(output_schema_path)


if __name__ == '__main__':
    import sys
    import yaml
    gen_test = False
    if '-t' in sys.argv:
        gen_test = True
        sys.argv.remove('-t')
    test_conf = 'tests.yaml'
    if len(sys.argv) > 2:
        test_conf = sys.argv[1]
    with open(test_conf) as test_conf_f:
        tests = yaml.load(test_conf_f, Loader=yaml.FullLoader)
    generateOutput(tests, gen_test=gen_test)

